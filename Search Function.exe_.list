EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
Search Function.exe_ -- emu8086 assembler version: 4.05  
 
[ 12/24/2022  --  12:35:22 AM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .model small
[   2]        :                                       
[   3]        :                                       .stack 100h
[   4]        :                                       
[   5]        :                                       .data
[   6]    0100: 0D 0A 45 6E 74 65 72 20 53 74 75 64   ID_Msg      db  0dh,0ah, "Enter Student ID:  $"
                65 6E 74 20 49 44 3A 20 20 24       
[   7]    0116: 57 72 6F 6E 67 20 56 61 6C 75 65 20   Exit_Msg    db 'Wrong Value for Index, Please Try Again.$'
                66 6F 72 20 49 6E 64 65 78 2C 20 50 
                6C 65 61 73 65 20 54 72 79 20 41 67 
                61 69 6E 2E 24                      
[   8]    013F: 54 68 65 20 53 74 75 64 65 6E 74 20   St_ID1      db 'The Student with ID: $'
                77 69 74 68 20 49 44 3A 20 24       
[   9]    0155: 20 20 48 61 73 20 47 72 61 64 65 20   St_ID2      db '  Has Grade Value:  $'
                56 61 6C 75 65 3A 20 20 24          
[  10]    016A: 50 72 67 6F 72 61 6D 20 68 61 73 20   Exit        db 'Prgoram has Finished Successfully$'
                46 69 6E 69 73 68 65 64 20 53 75 63 
                63 65 73 73 66 75 6C 6C 79 24       
[  11]    018C: 00                                    ID_Length         db  ?
[  12]    018D: 00                                    ID_Value          db  0
[  13]        :                                       
[  14]        :                                       
[  15]    018E: 04                                    ID          db  4            ;Max Nnumber of Characters Allowed (3).
[  16]    018F: 00                                    db  ?            ;Number of Characters Entered by User.
[  17]    0190: 00 00 00 00                           db  4 dup(0)    ;Characters Entered by User.
[  18]        :                                       
[  19]    0194: 03 09 20 06 03 20 08 01 20            Arr         db   3,9,' ',6,3,' ',,8,1,' ',
[  20]        :                                       
[  21]        :                                       .code
[  22]    01A0:                                       main proc
[  23]    01A0: B8 10 00                              mov ax, @data               ; Making the "DS" Pointing to our Data Segment
[  24]    01A3: 8E D8                                 mov ds, ax
[  25]        :                                       
[  26]    01A5: B4 09                                 mov ah,09h
[  27]    01A7: BA 00 00                              lea dx,ID_Msg
[  28]    01AA: CD 21                                 int 21h
[  29]        :                                       
[  30]        :                                       ;Capture String From Keyboard.
[  31]    01AC: B4 0A                                 mov ah, 0Ah                 ;Service to Capture String from Keyboard.
[  32]    01AE: BA 8E 00                              mov dx, offset ID
[  33]    01B1: CD 21                                 int 21h
[  34]        :                                       
[  35]        :                                       
[  36]        :                                       
[  37]        :                                       
[  38]    01B3: BE 8F 00                              mov si, offset ID + 1    ;Number Of Characters Entered
[  39]    01B6: 8A 0C                                 mov cl, [si]                    ;Move Length to Cl.
[  40]    01B8: B5 00                                 mov ch,0                       ;Cear Ch to use Cx.
[  41]    01BA: 88 0E 8C 00                           mov ID_Length, cl                       ;Cear Ch to use Cx.
[  42]        :                                       
[  43]    01BE: BE 00 00                              mov si, 0
[  44]    01C1: B5 00                                 mov ch, 0
[  45]    01C3: 8A 0E 8C 00                           mov cl,ID_Length
[  46]        :                                       
[  47]    01C7:                                       Check3:
[  48]    01C7: 80 BC 90 00 29                        cmp ID[2][si], 029h     ; Compare Bl With Ascii Value of 01
[  49]    01CC: 7E 2F                                 jle EndPrgm
[  50]    01CE: 46                                    inc si
[  51]    01CF: E2 F6                                 loop Check3
[  52]        :                                       
[  53]    01D1: BE 00 00                              mov si, 0
[  54]    01D4: B5 00                                 mov ch, 0
[  55]    01D6: 8A 0E 8C 00                           mov cl,ID_Length
[  56]        :                                       
[  57]    01DA:                                       Check4:
[  58]    01DA: 80 BC 90 00 39                        cmp ID[2][si], 039h     ; Compare Bl With Ascii Value of 09
[  59]    01DF: 7F 1C                                 jg EndPrgm
[  60]    01E1: 46                                    inc si
[  61]    01E2: E2 F6                                 loop Check4
[  62]        :                                       
[  63]        :                                       
[  64]    01E4: BE 00 00                              mov si, 0
[  65]    01E7: B5 00                                 mov ch, 0
[  66]    01E9: 8A 0E 8C 00                           mov cl,ID_Length
[  67]        :                                       
[  68]        :                                       ; convert the 'char digit' to 'intger digit' by sub 48 from it
[  69]    01ED:                                       To_Digits2:
[  70]    01ED: 8A 94 90 00                           mov dl, ID[2][si]
[  71]    01F1: 80 EA 30                              sub dl,48
[  72]    01F4: 88 94 90 00                           mov ID[2][si], dl
[  73]    01F8: 46                                    inc si
[  74]    01F9: E2 F2                                 loop To_Digits2
[  75]        :                                       
[  76]    01FB: EB 10                                 jmp DoWork
[  77]        :                                       
[  78]        :                                       
[  79]    01FD:                                       EndPrgm:
[  80]    01FD: B8 10 00                              mov ax, @data
[  81]    0200: 8E D8                                 mov ds, ax
[  82]    0202: B4 09                                 mov ah, 09h
[  83]    0204: BA 16 00                              lea dx, Exit_Msg
[  84]    0207: CD 21                                 int 21h
[  85]    0209: B4 4C                                 mov ah,0x4C     ;DOS "terminate" function
[  86]    020B: CD 21                                 int 0x21
[  87]        :                                       
[  88]    020D:                                       DoWork:
[  89]        :                                       ; Get the Exact ID's index according to our Array of bytes
[  90]    020D: B8 01 00                              mov ax,1
[  91]    0210: 8A 0E 8C 00                           mov cl,ID_Length
[  92]    0214: B5 00                                 mov ch,0
[  93]    0216: B3 0A                                 mov bl,10
[  94]        :                                       
[  95]        :                                       
[  96]    0218: 80 F9 01                              cmp cl,1
[  97]    021B: 74 0A                                 je La2
[  98]    021D: 80 E9 01                              sub cl,1
[  99]        :                                       
[ 100]        :                                       ; 10^x, to transfer the "string" input to real integer value
[ 101]    0220: 51                                    push cx
[ 102]    0221:                                       L:
[ 103]    0221: F6 E3                                 mul bl
[ 104]    0223: E2 FC                                 loop L
[ 105]        :                                       
[ 106]    0225: 59                                    pop cx
[ 107]    0226: 41                                    inc cx
[ 108]        :                                       
[ 109]    0227:                                       La2:
[ 110]    0227: BE 00 00                              mov si,0
[ 111]    022A: BA 00 00                              mov dx ,0
[ 112]        :                                       
[ 113]        :                                       ; calculate the ID by multiply each index by 10 power it's weight value
[ 114]    022D:                                       Get_ID:
[ 115]    022D: 50                                    push ax
[ 116]    022E: F6 A4 90 00                           mul ID[2][si]
[ 117]        :                                       
[ 118]    0232: 02 D0                                 add dl,al
[ 119]    0234: 58                                    pop ax
[ 120]    0235: F6 F3                                 div bl
[ 121]    0237: 46                                    inc si
[ 122]        :                                       
[ 123]    0238: E2 F3                                 loop Get_ID
[ 124]        :                                       
[ 125]    023A: 88 16 8D 00                           mov ID_Value,dl
[ 126]    023E: 8A C2                                 mov al,dl
[ 127]    0240: B2 03                                 mov dl,03
[ 128]    0242: F6 E2                                 mul dl
[ 129]    0244: 2C 03                                 sub al,03
[ 130]        :                                       
[ 131]    0246: B4 00                                 mov ah,0
[ 132]        :                                       
[ 133]    0248: 8B F0                                 mov si, ax
[ 134]        :                                       
[ 135]    024A: BB 00 00                              mov bx,0
[ 136]    024D: 8A 9C 94 00                           mov bl,Arr[si]
[ 137]    0251: 46                                    inc si
[ 138]    0252: 8A BC 94 00                           mov bh,Arr[si]
[ 139]    0256: EB 00                                 jmp End_Msg
[ 140]        :                                       
[ 141]        :                                       
[ 142]        :                                       
[ 143]        :                                       
[ 144]    0258:                                       End_Msg:
[ 145]    0258: B8 10 00                              mov ax, @data
[ 146]    025B: 8E D8                                 mov ds, ax
[ 147]        :                                       
[ 148]        :                                       ; Print New Line
[ 149]    025D: BA 0D 00                              mov dx,13
[ 150]    0260: B4 02                                 mov ah,2
[ 151]    0262: CD 21                                 int 21h
[ 152]    0264: BA 0A 00                              mov dx,10
[ 153]    0267: B4 02                                 mov ah,2
[ 154]    0269: CD 21                                 int 21h
[ 155]        :                                       
[ 156]    026B: 8A C8                                 mov cl,al
[ 157]    026D: 8A EC                                 mov ch,ah
[ 158]        :                                       ; Print Message Num1
[ 159]    026F: B4 09                                 mov ah,09h
[ 160]    0271: BA 3F 00                              lea dx,St_ID1
[ 161]    0274: CD 21                                 int 21h
[ 162]        :                                       
[ 163]    0276: B4 02                                 mov ah, 02h      ;DOS Character Output
[ 164]    0278: 8A 16 8D 00                           mov dl, ID_Value
[ 165]    027C: 80 C2 30                              add dl,48
[ 166]    027F: CD 21                                 int 21h
[ 167]        :                                       
[ 168]        :                                       
[ 169]        :                                       
[ 170]        :                                       
[ 171]        :                                       
[ 172]        :                                       ; Print Message Num2
[ 173]    0281: BA 0D 00                              mov dx,13
[ 174]    0284: B4 09                                 mov ah,09h
[ 175]    0286: BA 55 00                              lea dx,St_ID2
[ 176]    0289: CD 21                                 int 21h
[ 177]        :                                       
[ 178]    028B: B4 02                                 mov ah, 02h      ;DOS Character Output
[ 179]    028D: 8A D3                                 mov dl, bl
[ 180]    028F: 80 C2 30                              add dl,48
[ 181]    0292: CD 21                                 int 21h
[ 182]    0294: B4 02                                 mov ah, 02h      ;DOS Character Output
[ 183]    0296: 8A D7                                 mov dl, bh
[ 184]    0298: 80 C2 30                              add dl,48
[ 185]    029B: CD 21                                 int 21h
[ 186]        :                                       
[ 187]        :                                       ; Print New Line
[ 188]    029D: BA 0D 00                              mov dx,13
[ 189]    02A0: B4 02                                 mov ah,2
[ 190]    02A2: CD 21                                 int 21h
[ 191]    02A4: BA 0A 00                              mov dx,10
[ 192]    02A7: B4 02                                 mov ah,2
[ 193]    02A9: CD 21                                 int 21h
[ 194]        :                                       
[ 195]        :                                       
[ 196]    02AB: B4 09                                 mov ah, 09h
[ 197]    02AD: BA 6A 00                              lea dx, Exit
[ 198]    02B0: CD 21                                 int 21h
[ 199]        :                                       
[ 200]        :                                       main endp
[ 201]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: B2      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 03      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 03      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 7C      -   check sum (l.byte)
0013: B5      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 1A      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 1A      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022: 5E      -   relocation table - offset inside segment (l.byte)
0023: 00      -   relocation table - offset inside segment (h.byte)
0024: 1A      -   relocation table - segment anchor (l.byte)
0025: 00      -   relocation table - segment anchor (h.byte)
0026: B9      -   relocation table - offset inside segment (l.byte)
0027: 00      -   relocation table - offset inside segment (h.byte)
0028: 1A      -   relocation table - segment anchor (l.byte)
0029: 00      -   relocation table - segment anchor (h.byte)
002A to 01FF  -   reserved relocation area  (00) 




===================================================================================================
