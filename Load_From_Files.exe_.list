EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
Load_From_Files.exe_ -- emu8086 assembler version: 4.05  
 
[ 12/24/2022  --  2:04:35 AM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       include 'EMU8086.INC'
[   2]        :                                       .model small
[   3]        :                                       .stack 100
[   4]        :                                       .data
[   5]    0070: 1A                                    buff    db  26        ;MAX NUMBER OF CHARACTERS ALLOWED (25).
[   6]    0071: 00                                    db  ?         ;NUMBER OF CHARACTERS ENTERED BY USER.
[   7]    0072: 00 00 00 00 00 00 00 00 00 00 00 00   db  26 dup(0) ;CHARACTERS ENTERED BY USER.
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00                               
[   8]    008C: 47 72 61 64 65 73 2E 74 78 74 00 00   fname1 dw "Grades.txt",0
                                                    
[   9]    0098: 00 00 00 00 00 00 00 00 00 00 00 00   text db 100  dup(0)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00                         
[  10]    00FC: 00 00                                 fhand dw ?
[  11]    00FE: 00 00                                 var dw ?
[  12]    0100: 9A 01                                 num  dw  410   ; <----- See below
[  13]    0102: 20 20 20 20 20 20 24                  numS db  6 dup(' '),'$'
[  14]        :                                       .code
[  15]    0110: B8 07 00                              mov ax,@data
[  16]    0113: 8E D8                                 mov ds,ax
[  17]        :                                       
[  18]    0115: B4 3D                                 mov ah,3dh
[  19]    0117: B0 00                                 mov al,0
[  20]    0119: BA 1C 00                              MOV DX, OFFSET(fname1)
[  21]        :                                       ;lea dx,fname1
[  22]    011C: CD 21                                 int 21h
[  23]    011E: A3 8C 00                              mov fhand, ax
[  24]    0121: BE 00 00                              mov si,0
[  25]    0124:                                       L:
[  26]        :                                       
[  27]    0124: B4 3F                                 mov ah,3fh
[  28]    0126: 8B 1E 8C 00                           mov bx,fhand
[  29]    012A: B9 01 00                              mov cx,1
[  30]        :                                       ;mov dx, offset text+si
[  31]    012D: 8D 54 28                              lea dx,text[si]
[  32]    0130: CD 21                                 int 21h
[  33]    0132: 3D 00 00                              cmp ax,0
[  34]    0135: 74 03                                 JE EXIT
[  35]    0137: 46                                    INC SI
[  36]    0138: EB EA                                 JMP L
[  37]        :                                       
[  38]    013A:                                       EXIT:
[  39]        :                                       
[  40]    013A: C6 44 28 24                           MOV byte PTR text[si],"$"
[  41]    013E: B4 3E                                 MOV AH,3EH
[  42]    0140: CD 21                                 INT 21H
[  43]        :                                       
[  44]    0142: B4 09                                 mov ah,9
[  45]    0144: BA 28 00                              lea dx,text
[  46]    0147: CD 21                                 int 21h
[  47]    0149: 50 56 EB 03 0D 0A 00 BE 3D 00 2E 8A   printn ""
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[  48]        :                                       
[  49]        :                                       ; /* edit in array */
[  50]        :                                       
[  51]        :                                       
[  52]        :                                       ; /* take input */ ;
[  53]        :                                       
[  54]        :                                       
[  55]        :                                       ;CAPTURE STRING FROM KEYBOARD.
[  56]    0163: B4 0A                                 mov ah, 0Ah ;SERVICE TO CAPTURE STRING FROM KEYBOARD.
[  57]    0165: BA 00 00                              mov dx, offset buff
[  58]    0168: CD 21                                 int 21h
[  59]        :                                       
[  60]        :                                       ;CHANGE CHR(13) BY '$'.
[  61]    016A: BE 01 00                              mov si, offset buff + 1 ;NUMBER OF CHARACTERS ENTERED.
[  62]    016D: 8A 0C                                 mov cl, [ si ] ;MOVE LENGTH TO CL.
[  63]        :                                       
[  64]        :                                       
[  65]        :                                       ; /* Add input in array */ ;
[  66]    016F: A0 02 00                              mov al, buff[2]
[  67]    0172: A2 28 00                              mov text[0], al
[  68]    0175: A0 03 00                              mov al, buff[3]
[  69]    0178: A2 29 00                              mov text[1], al
[  70]    017B: 50 56 EB 03 0D 0A 00 BE 6F 00 2E 8A   printn ""
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[  71]    0195: 50 56 EB 03 0D 0A 00 BE 89 00 2E 8A   printn ""
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[  72]    01AF: B4 09                                 mov ah,9
[  73]    01B1: BA 28 00                              lea dx,text
[  74]    01B4: CD 21                                 int 21h
[  75]        :                                       
[  76]        :                                       
[  77]    01B6: 33 C0                                 xor ax, ax
[  78]    01B8: A0 28 00                              mov al, text[0]
[  79]    01BB: 2D 30 00                              sub ax, 48
[  80]        :                                       
[  81]    01BE: BB 0A 00                              mov bx, 10
[  82]    01C1: BE 97 00                              mov si, offset numS+5
[  83]        :                                       
[  84]    01C4: 3D 00 00                              cmp ax,0
[  85]    01C7: 7D 00                                 jge next
[  86]    01C9:                                       next:
[  87]    01C9: BA 00 00                              mov dx,0
[  88]    01CC: F7 F3                                 div bx
[  89]    01CE: 80 C2 30                              add dl, 30h
[  90]    01D1: 88 14                                 mov [si],   dl
[  91]    01D3: 4E                                    dec si
[  92]    01D4: 3D 00 00                              cmp ax, 0
[  93]    01D7: 75 F0                                 jne next
[  94]        :                                       
[  95]    01D9: 83 3E 90 00 00                        cmp num,0
[  96]    01DE: 7D 04                                 jge sof
[  97]    01E0: C6 04 2D                              mov byte ptr[si],   '-'
[  98]    01E3: 4E                                    dec si
[  99]        :                                       
[ 100]    01E4:                                       sof:
[ 101]    01E4: 46                                    inc si
[ 102]    01E5: B4 09                                 mov ah, 9
[ 103]    01E7: 8B D6                                 mov dx, si
[ 104]    01E9: CD 21                                 int 21h
[ 105]        :                                       
[ 106]    01EB: B4 4C                                 mov ah,4ch
[ 107]    01ED: CD 21                                 int 21h
[ 108]        :                                       end
[ 109]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: EF      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 64      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: A3      -   check sum (l.byte)
0013: 5B      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 11      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 11      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
